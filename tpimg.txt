import cv2
import numpy as np

##prendre l'image, faire le rgb et hsv
image = cv2.imread("P:\\perception\\balle_6.jpg")
image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
image_hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)

#pour les trackbars
def nothing(x):
    pass

#regler les hsv
cv2.namedWindow("Trackbars")
cv2.createTrackbar("H min", "Trackbars", 15, 179, nothing)
cv2.createTrackbar("S min", "Trackbars", 150, 255, nothing)
cv2.createTrackbar("V min", "Trackbars", 212, 255, nothing)
cv2.createTrackbar("H max", "Trackbars", 50, 179, nothing)
cv2.createTrackbar("S max", "Trackbars", 255, 255, nothing)
cv2.createTrackbar("V max", "Trackbars", 255, 255, nothing)

# Fonction pour détecter toutes les balles jaunes
def detect_yellow_balls():
    h_min = cv2.getTrackbarPos("H min", "Trackbars")
    s_min = cv2.getTrackbarPos("S min", "Trackbars")
    v_min = cv2.getTrackbarPos("V min", "Trackbars")
    h_max = cv2.getTrackbarPos("H max", "Trackbars")
    s_max = cv2.getTrackbarPos("S max", "Trackbars")
    v_max = cv2.getTrackbarPos("V max", "Trackbars")

    lower_yellow = np.array([h_min, s_min, v_min])
    upper_yellow = np.array([h_max, s_max, v_max])

    mask = cv2.inRange(image_hsv, lower_yellow, upper_yellow)

    # Nettoyage ouverture (érosion puis dilatation)
    kernel = np.ones((5, 5), np.uint8)
    mask_clean = cv2.morphologyEx(mask, cv2.MORPH_OPEN, kernel, iterations=5)
    mask_clean = cv2.morphologyEx(mask_clean, cv2.MORPH_CLOSE, kernel, iterations=1)


    cv2.imshow("Masque Jaune", mask)
    cv2.imshow("Masque apres nettoyage", mask_clean)

    contours, _ = cv2.findContours(mask_clean, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    result = image.copy()
    found = False

    for contour in contours:
        area = cv2.contourArea(contour)
        if area > 100:  # Ignorer les petits bruits
            (x, y), radius = cv2.minEnclosingCircle(contour)
            center = (int(x), int(y))
            radius = int(radius)

            if radius > 50:  # éviter les tout petits cercles parasites
                cv2.circle(result, center, radius, (0, 255, 0), 2)
                cv2.circle(result, center, 3, (0, 0, 255), -1)
                print(f"Balle jaune détectée - Centre : {center}, Rayon : {radius}")
                found = True

    if not found:
        print("Aucune balle jaune détectée.")
    else:
        cv2.imshow("Balles jaunes détectées", result)


def mouse_callback(event, x, y, flags, param):
    if event == cv2.EVENT_LBUTTONDOWN:
        detect_yellow_balls()

def nothing(x):
    pass


cv2.imshow("image", image)
cv2.setMouseCallback("image", mouse_callback)

while True:
    key = cv2.waitKey(1) & 0xFF
    if key == 27:  # Touche ÉCHAP pour quitter
        break

cv2.destroyAllWindows()



